---

- name: extract password from file
  slurp:
    src: "{{ mckadm_user_home }}/.ssh/id_ed25519.pub"
  register: pub_key_file

- name: Create directory if it does not exist
  file:
    path: "{{ mckadm_user_home }}/var/cloud-init/"
    state: directory
    mode: '0750'

- template:
    src: cloud_init.cfg
    dest: "{{ mckadm_user_home }}/var/cloud-init/cloud-init-{{ vm_item.name }}.cfg"
  vars:
    hostname: "{{ vm_item.name }}"
    pub_key: "{{ pub_key_file['content'] | b64decode }}"

- template:
    src: network_config.cfg
    dest: "{{ mckadm_user_home }}/var/cloud-init/network-config-{{ vm_item.name }}.cfg"
  vars:
    hostname: "{{ vm_item.name }}"
    ip: "{{ vm_item.network['ip'] }}"
    gw: "{{ vm_item.network['ip'].split('.')[:3] | join('.') }}.1"
    dns: "{{ vm_item.network['ip'].split('.')[:3] | join('.') }}.1"

- name: set disks path
  set_fact:
    root_disk_path: "{{ disks_location }}/{{ vm_item.name }}_root.img"
    var_disk_path: "{{ disks_location }}/{{ vm_item.name }}_var.img"
    seed_img_path: "{{ mckadm_user_home }}/var/cloud-init/seed_{{ vm_item.name }}.img"

- name: create the cloud init img
  command: 
    cmd: 'cloud-localds -v 
      --network-config={{ mckadm_user_home }}/var/cloud-init/network-config-{{ vm_item.name }}.cfg
      {{ seed_img_path }}
      {{ mckadm_user_home }}/var/cloud-init/cloud-init-{{ vm_item.name }}.cfg'
    creates: "{{ seed_img_path }}"

- name: create the root disk
  command:
    cmd: qemu-img create -b {{ base_image }} -f qcow2 -F qcow2 {{ root_disk_path }} {{ vm_item.root_size }}G
    creates: "{{ root_disk_path }}"

- name: create the var disk
  command:
    cmd: qemu-img create -b {{ base_image }} -f qcow2 -F qcow2 {{ var_disk_path }} {{ vm_item.var_size }}G
    creates: "{{ var_disk_path }}"

- name: create vm
  command: 
    cmd: "virt-install --name {{ vm_item.name }}
    --virt-type kvm --memory {{ vm_item.mem }} --vcpus {{ vm_item.cpu }}
    --boot hd,menu=on 
    --graphics none
    --disk path={{ root_disk_path }}
    --disk path={{ seed_img_path }},device=disk,readonly=on
    --disk path={{ var_disk_path }}
    --os-type Linux --os-variant ubuntu20.04
    --network network={{ vm_item.network['name'] }},model=virtio
    --noautoconsole"


